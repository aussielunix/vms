#!/usr/bin/env bash
#
# Mick Pollard @aussielunix 6-SEP-2021
#
# Usage: vms new [-o ubuntu|centos7|centos8] [-n name] [-i ip] [-d disksize] [-r ram] [-c cpu]
# Summary: This will create a new VM configuration, set it to autostart and boot it up.
# Help: This will create a new VM configuration, set it to autostart and boot it up.
# The new VM will have a static IP and be built based on upstream cloud images.
#
# #Required arguments
#
#   [-n name]         - <string> name of the VM. must be unique.
#   [-i ip]           - <integer> the last octet of the IP address for the VM
#
# #Optional arguments
#
#   [-c cpu]          - <integer> cpu count                       (default: 2)
#   [-d disksize]     - <interger> hdd size, in GB                (default: 50G)
#   [-o os_variant]   - <string> [ubuntu20.04|centos7.0|centos8]  (default: ubuntu20.04)
#   [-r ram]          - <integer> ram size, in MB                 (default: 2048)
#   [-v]              - be VERBOSE                                (default: false)
#
# #Examples
#
#   foo@bar$ vms new -n testvm  -i 73
#   foo@bar$ vms new -n testvm  -i 73 -o centos8
#   foo@bar$ vms new -n testvm  -i 73 -v
#   foo@bar$ vms new -n testvm2 -i 74 -d 100 -r 4096 -c 4
#
#
set -e

if [[ $# == 0 ]]; then
  echo "error: missing arguments."
  echo
  echo
  vms help new
  exit 1
fi

## Set some defaults for our new VM
# requires bash 4 or higher
#
declare -A NEW_VM
NEW_VM["NAME"]=""
NEW_VM["IP"]=""
NEW_VM["DISK"]="50"
NEW_VM["RAM"]="2048"
NEW_VM["CPU"]="2"
NEW_VM["OS"]="ubuntu"
NEW_VM["TMPDIR"]="/tmp/foo$$" # :FIXME: This should be trapped


while getopts ":n:i:d:r:c:o:v" opt; do
  case $opt in
    n)
      NEW_VM["NAME"]=$OPTARG
      ;;
    i)
      NEW_VM["IP"]=$OPTARG
      ;;
    d)
      NEW_VM["DISK"]=$OPTARG
      ;;
    r)
      NEW_VM["RAM"]=$OPTARG
      ;;
    c)
      NEW_VM["CPU"]=$OPTARG
      ;;
    o)
      NEW_VM["OS"]=$OPTARG
      ;;
    v)
      VERBOSE="1"
      ;;
    h)
      vms help new
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo
      echo
      vms help new
      exit 1
      ;;
    :)
      echo "Option: -$OPTARG requires an argument." >&2
      echo
      echo
      vms help new
      exit 1
    ;;
  esac
done

## Check that mandatory flags/arguments are present
#
check_mandatory() {
  if [[ -z "${NEW_VM["NAME"]:-}" ]] || [[ -z "${NEW_VM["IP"]}" ]]; then
    echo "Missing mandatory argument: [-n name] or [-i ip]"
    echo
    echo
    vms help new
    exit 1
  fi
}

## Check if VM already exists
# :TODO: - pass the xml and exact match the name
check_existing_vm() {
  if [[ $(virsh list --all | grep ${NEW_VM["NAME"]}) ]]; then
    echo "abort: ${NEW_VM["CONFDIR"]} already exists."
    exit 64
  fi
}
## Set NEW_VM["OS"] & NEW_VM["OS_VARIANT"]
#
set_os_variant() {
  case "${NEW_VM["OS"]}" in
    ubuntu)
      NEW_VM["OS"]="ubuntu"
      NEW_VM["OS_VARIANT"]="ubuntu20.04"
      ;;
    centos7)
      NEW_VM["OS_VARIANT"]="centos8"
      NEW_VM["OS"]="centos"
      ;;
    centos | centos8)
      NEW_VM["OS_VARIANT"]="centos8"
      NEW_VM["OS"]="centos"
      ;;
    *)
      echo "Unknow OS: ${NEW_VM["OS"]}"
      vms help new
      exit 2
      ;;
  esac
}

## Generate config files for new VM
#
generate_config() {
  if [[ ! -z $VERBOSE ]]; then
    echo "mkdir -p ${NEW_VM["TMPDIR"]}"
    echo
    echo "Generated metadata file               ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.metadata"
    echo "Generated network configuration       ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.netplan"
    echo "Generated cloud-configuration         ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.cloudinit"
    echo
  fi
  mkdir -p ${NEW_VM["TMPDIR"]}
  
  echo "instance-id: $(uuidgen || echo i-abcdefg)" > ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.metadata
  cat ${_VMS_ROOT}/share/templates/${NEW_VM["OS"]}/${NEW_VM["OS_VARIANT"]}/vm.netplan.tmpl | sed "s/VMADDRESS/${NEW_VM["IP"]}/g" > ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.netplan
  cat ${_VMS_ROOT}/share/templates/${NEW_VM["OS"]}/${NEW_VM["OS_VARIANT"]}/vm.cloudinit.tmpl | sed "s/VMNAME/${NEW_VM["NAME"]}/g" > ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.cloudinit

  # generate the iso file of the above config files
  # :TODO: wrap this in a TRAP
  cloud-localds \
    --network-config=${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.netplan \
    ${NEW_VM["TMPDIR"]}/seed.iso \
    ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.cloudinit \
    ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.metadata
}

## Prepare os disk based on existing cloud image
#
prepare_os_disk() {
  if [[ ! -z $VERBOSE ]]; then
    echo "Creating disk volume ${NEW_VM["NAME"]} from ${NEW_VM["OS_VARIANT"]} cloud image and resizing it to ${NEW_VM["DISK"]}G"
  fi

  virsh vol-clone --pool default --vol ${NEW_VM["OS_VARIANT"]} --newname ${NEW_VM["NAME"]} > /dev/null
  virsh vol-resize --pool default --vol "${NEW_VM["NAME"]}" "${NEW_VM["DISK"]}G" > /dev/null
}

## Cloud images need a seed.iso with meta-data, user-data and network config
#
prepare_seed_disk() {
  if [[ ! -z $VERBOSE ]]; then
    echo "Creating a virtual cdrom with ${NEW_VM["NAME"]}.metadata, ${NEW_VM["NAME"]}.netplan & ${NEW_VM["NAME"]}.cloudinit"
  fi
  IMGFILE="${NEW_VM["TMPDIR"]}/seed.iso"
  IMGSIZE=$(qemu-img info --output json ${IMGFILE} | jq -r .[\"virtual-size\"])
  IMGFMT=$(qemu-img info --output json ${IMGFILE} | jq -r .format)
  IMGPOOL=default
  virsh vol-create-as $IMGPOOL ${NEW_VM["NAME"]}.seed.iso $IMGSIZE --format $IMGFMT > /dev/null
  virsh vol-upload --pool $IMGPOOL ${NEW_VM["NAME"]}.seed.iso ${IMGFILE} > /dev/null
  
  # :TODO: this should be fixed as part of trapping the mktmp
  if [[ ! -z $VERBOSE ]]; then
    echo "rm -rf ${NEW_VM["TMPDIR"]}"
  fi
}

## Create the new VM
#
create_vm() {
  if [[ ! -z $VERBOSE ]]; then
    echo "Creating new ${NEW_VM["OS_VARIANT"]} VM - disk: ${NEW_VM["DISK"]} ram: ${NEW_VM["RAM"]} cpu: ${NEW_VM["CPU"]} ip: 192.168.20.${NEW_VM["IP"]}"
  else
    echo "Creating new ${NEW_VM["OS_VARIANT"]} VM - ${NEW_VM["NAME"]}"
  fi

  echo "virsh console ${NEW_VM["NAME"]} to see when it is finished being created."
  echo

  virt-install \
    --cpu host-passthrough \
    --name ${NEW_VM["NAME"]} \
    --vcpus ${NEW_VM["CPU"]} \
    --memory ${NEW_VM["RAM"]} \
    --disk vol=default/${NEW_VM["NAME"]}.seed.iso,device=cdrom \
    --disk vol=default/${NEW_VM["NAME"]},device=disk \
    --os-type linux --os-variant ${NEW_VM["OS_VARIANT"]} \
    --virt-type kvm \
    --graphics none \
    --network network=br0,model=virtio \
    --noautoconsole \
    --autostart \
    --quiet \
    --import
}

main() {
  check_mandatory
  check_existing_vm
  set_os_variant
  generate_config
  prepare_os_disk
  prepare_seed_disk
  create_vm
}

main "$@"
