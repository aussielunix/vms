#!/usr/bin/env bash
#
# Mick Pollard @aussielunix 6-SEP-2021
#
# Usage: vms new [-o ubuntu|debian10|debian11|centos] [-n name] [-i ip] [-d disksize] [-r ram] [-c cpu]
# Summary: This will create a new VM configuration, set it to autostart and boot it up.
# Help: The VM will be built based on upstream cloud images, and by default, will lease an IP on the NAT network.
#
# Other Networking options:
# - VM on bridge interface using DHCP
# - VM on bridge interface with static IP
#
# #Required arguments
#
#   [-n name]         - <string> name of the VM. must be unique.
#
# #Optional arguments
#
#   [-i ip]           - <integer> the last octet of the IP address for the VM   (default: nil)
#   [-e dev]          - <string> alternative host net device [br0|br1|...]      (default: virbr0)
#   [-c cpu]          - <integer> cpu count                                     (default: 2)
#   [-d disksize]     - <interger> hdd size, in GB                              (default: 50G)
#   [-o os_variant]   - <string> [ubuntu|debian10|debian11|centos]              (default: ubuntu)
#   [-r ram]          - <integer> ram size, in MB                               (default: 2048)
#   [-v]              - be VERBOSE                                              (default: false)
#
# #Examples
#
#   foo@bar$ vms new -n testvm                                                  # dhcp on virbr0 (NAT)
#   foo@bar$ vms new -n testvm -v                                               # be verbose, dhcp on virbr0 (NAT)
#   foo@bar$ vms new -n testvm -o debian10                                      # debian10, dhcp on virbr0 (NAT)
#   foo@bar$ vms new -n testvm -d 100 -r 4096 -c 4                              # 100G disk, 4G ram, 4 CPU, dhcp on virbr0 (NAT)
#   foo@bar$ vms new -n testvm -e br0                                           # dhcp on br0 (BRIDGED)
#   foo@bar$ vms new -n testvm -e br0 -i 73                                     # static IP on br0 (BRIDGED)
#
#
set -e

if [[ $# == 0 ]]; then
  echo "error: missing arguments."
  echo
  echo
  vms help new
  exit 1
fi

## Set some defaults for our new VM
# requires bash 4 or higher
#
declare -A NEW_VM
NEW_VM["NAME"]=""
NEW_VM["IP"]=""
NEW_VM["NDEV"]="default"
NEW_VM["DISK"]="50"
NEW_VM["RAM"]="2048"
NEW_VM["CPU"]="2"
NEW_VM["OS"]="ubuntu"
NEW_VM["TMPDIR"]="/tmp/foo$$" # :FIXME: This should be trapped

while getopts ":n:i:e:d:r:c:o:v" opt; do
  case $opt in
    n)
      NEW_VM["NAME"]=$OPTARG
      ;;
    i)
      NEW_VM["IP"]=$OPTARG
      ;;
    e)
      NEW_VM["NDEV"]=$OPTARG
      ;;
    d)
      NEW_VM["DISK"]=$OPTARG
      ;;
    r)
      NEW_VM["RAM"]=$OPTARG
      ;;
    c)
      NEW_VM["CPU"]=$OPTARG
      ;;
    o)
      NEW_VM["OS"]=$OPTARG
      ;;
    v)
      VERBOSE="1"
      ;;
    h)
      vms help new
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo
      echo
      vms help new
      exit 1
      ;;
    :)
      echo "Option: -$OPTARG requires an argument." >&2
      echo
      echo
      vms help new
      exit 1
    ;;
  esac
done

## Check that mandatory flags/arguments are present
#
check_mandatory() {
  if [[ -z "${NEW_VM["NAME"]:-}" ]]; then
    echo "Missing mandatory argument: [-n name]"
    echo
    echo
    vms help new
    exit 1
  fi
}

## Check not tryng to set static IP on the NAT interface
#
set_static_default_device() {
  if [[ ! -z ${NEW_VM["IP"]} ]] && [[ ${NEW_VM["NDEV"]} == 'default' ]]; then
    NEW_VM["NDEV"]="br0"
  fi
}

## Check if VM already exists
# :TODO: - parse the xml and exact match the name
check_existing_vm() {
  virsh -rq dominfo --domain ${NEW_VM["NAME"]} >/dev/null 2>&1 || EXIT_CODE=$?
  if [[ ${EXIT_CODE} -eq 0 ]]; then
    echo "abort: ${NEW_VM["NAME"]} already exists."
    exit 64
  fi
}

## Set NEW_VM["OS"] & NEW_VM["OS_VARIANT"]
#
set_os_variant() {
  case "${NEW_VM["OS"]}" in
    ubuntu)
      NEW_VM["OS"]="ubuntu"
      NEW_VM["OS_VARIANT"]="ubuntu20.04"
      ;;
    debian10)
      NEW_VM["OS"]="debian"
      NEW_VM["OS_VARIANT"]="debian10"
      ;;
    debian11)
      NEW_VM["OS"]="debian"
      NEW_VM["OS_VARIANT"]="debian11"
      ;;
    centos)
      NEW_VM["OS"]="centos"
      NEW_VM["OS_VARIANT"]="centos8"
      ;;
    *)
      echo "Unknow OS: ${NEW_VM["OS"]}"
      vms help new
      exit 2
      ;;
  esac
}

## Generate config files for new VM
#
generate_config() {
  if [[ ! -z $VERBOSE ]]; then
    echo "mkdir -p ${NEW_VM["TMPDIR"]}"
    echo
    echo "Generated metadata file               ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.metadata"
    echo "Generated cloud-configuration         ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.cloudinit"
    if [[ ! -z ${NEW_VM["IP"]} ]]; then
      echo "Generated network configuration       ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.netplan"
    fi
    echo
  fi
  mkdir -p ${NEW_VM["TMPDIR"]}

  echo "instance-id: $(uuidgen || echo i-abcdefg)" > ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.metadata
  cat ${_VMS_ROOT}/share/templates/${NEW_VM["OS"]}/${NEW_VM["OS_VARIANT"]}/vm.cloudinit.tmpl | sed "s/VMNAME/${NEW_VM["NAME"]}/g" > ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.cloudinit

  if [[ -z ${NEW_VM["IP"]} ]]; then
    # generate the iso file of the above config files
    # :TODO: wrap this in a TRAP
    cloud-localds \
      ${NEW_VM["TMPDIR"]}/seed.iso \
      ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.cloudinit \
      ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.metadata
  else
    cat ${_VMS_ROOT}/share/templates/${NEW_VM["OS"]}/${NEW_VM["OS_VARIANT"]}/vm.netplan.tmpl | sed "s/VMADDRESS/${NEW_VM["IP"]}/g" > ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.netplan
    # generate the iso file of the above config files
    # :TODO: wrap this in a TRAP
    cloud-localds \
      --network-config=${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.netplan \
      ${NEW_VM["TMPDIR"]}/seed.iso \
      ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.cloudinit \
      ${NEW_VM["TMPDIR"]}/${NEW_VM["NAME"]}.metadata
    fi
}

## Prepare os disk based on existing cloud image
#
prepare_os_disk() {
  if [[ ! -z $VERBOSE ]]; then
    echo "Creating disk volume ${NEW_VM["NAME"]} from ${NEW_VM["OS_VARIANT"]} cloud image and resizing it to ${NEW_VM["DISK"]}G"
  fi

  virsh vol-clone --pool default --vol ${NEW_VM["OS_VARIANT"]} --newname ${NEW_VM["NAME"]} > /dev/null
  virsh vol-resize --pool default --vol "${NEW_VM["NAME"]}" "${NEW_VM["DISK"]}G" > /dev/null
}

## Cloud images need a seed.iso with meta-data, user-data and network config
#
prepare_seed_disk() {
  if [[ ! -z $VERBOSE ]]; then
    echo "Creating a virtual cdrom with ${NEW_VM["NAME"]}.metadata, ${NEW_VM["NAME"]}.netplan & ${NEW_VM["NAME"]}.cloudinit"
  fi
  IMGFILE="${NEW_VM["TMPDIR"]}/seed.iso"
  IMGSIZE=$(qemu-img info --output json ${IMGFILE} | jq -r .[\"virtual-size\"])
  IMGFMT=$(qemu-img info --output json ${IMGFILE} | jq -r .format)
  IMGPOOL=default
  virsh vol-create-as $IMGPOOL ${NEW_VM["NAME"]}.seed.iso $IMGSIZE --format $IMGFMT > /dev/null
  virsh vol-upload --pool $IMGPOOL ${NEW_VM["NAME"]}.seed.iso ${IMGFILE} > /dev/null

  # :TODO: this should be fixed as part of trapping the mktmp
  if [[ ! -z $VERBOSE ]]; then
    echo "rm -rf ${NEW_VM["TMPDIR"]}"
  fi
}

## Create the new VM
#
create_vm() {

  if [[ ! -z $VERBOSE ]]; then

    if [[ -z $NEW_VM["IP"] ]]; then
      echo "Creating new ${NEW_VM["OS_VARIANT"]} VM - disk: ${NEW_VM["DISK"]} ram: ${NEW_VM["RAM"]} cpu: ${NEW_VM["CPU"]}"
    else
      echo "Creating new ${NEW_VM["OS_VARIANT"]} VM - disk: ${NEW_VM["DISK"]} ram: ${NEW_VM["RAM"]} cpu: ${NEW_VM["CPU"]} ip: 10.0.99.${NEW_VM["IP"]}"
    fi

    echo
    echo

    cat <<-EOF
    virt-install \\
      --cpu host-passthrough \\
      --name ${NEW_VM["NAME"]} \\
      --vcpus ${NEW_VM["CPU"]} \\
      --memory ${NEW_VM["RAM"]} \\
      --disk vol=default/${NEW_VM["NAME"]}.seed.iso,device=cdrom \\
      --disk vol=default/${NEW_VM["NAME"]},device=disk \\
      --os-type linux --os-variant ${NEW_VM["OS_VARIANT"]} \\
      --virt-type kvm \\
      --graphics none \\
      --network network=${NEW_VM["NDEV"]},model=virtio \\
      --noautoconsole \\
      --autostart \\
      --quiet \\
      --import
EOF

  else
    echo "Creating new ${NEW_VM["OS_VARIANT"]} VM - ${NEW_VM["NAME"]}"
  fi

  echo "virsh console ${NEW_VM["NAME"]} to see when it is finished being created."
  echo

  virt-install \
    --cpu host-passthrough \
    --name ${NEW_VM["NAME"]} \
    --vcpus ${NEW_VM["CPU"]} \
    --memory ${NEW_VM["RAM"]} \
    --disk vol=default/${NEW_VM["NAME"]}.seed.iso,device=cdrom \
    --disk vol=default/${NEW_VM["NAME"]},device=disk \
    --os-type linux --os-variant ${NEW_VM["OS_VARIANT"]} \
    --virt-type kvm \
    --graphics none \
    --network network=${NEW_VM["NDEV"]},model=virtio \
    --noautoconsole \
    --autostart \
    --quiet \
    --import
}

main() {
  check_mandatory
  set_static_default_device
  check_existing_vm
  set_os_variant
  generate_config
  prepare_os_disk
  prepare_seed_disk
  create_vm
}

main "$@"
